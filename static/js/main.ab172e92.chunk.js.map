{"version":3,"sources":["utils/duration/index.js","utils/class-names/index.js","pomodoro/Progress.js","utils/useInterval/index.js","pomodoro/PlayStop.js","pomodoro/SetDuration.js","pomodoro/Pomodoro.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","Progress","focusDuration","breakDuration","isTimerRunning","isSessionStarted","useState","remainingTimer","setRemainingTimer","duration","setDuration","durationType","setDurationType","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","getProgressPercent","durationInSecond","toFixed","data-testid","givenSeconds","seconds","round","secondsToDuration","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","PlayStop","setIsTimerRunning","startSession","aria-label","type","title","onClick","prevState","oi","btn","window","location","reload","disabled","SetDuration","setFocusDuration","setBreakDuration","handlePlusMinusClick","target","max","min","Pomodoro","document","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ab172e92.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { useState } from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\n//******  the purpose of this component is that at each interval just this component rerenders not the whole app ******/\n\nfunction Progress({\n  focusDuration,\n  breakDuration,\n  isTimerRunning,\n  isSessionStarted,\n}) {\n  //first time we get here is focusing time\n  //first time we get here remaining timer is equal to focusing time\n  const [remainingTimer, setRemainingTimer] = useState(focusDuration * 60); //problem here\n  // duration state variable switches between focusing duration or breaking duration. for the first time it is focusing duration\n  // duration switches between focusing duration or breaking duration each time remainingTimer becomes zero\n  const [duration, setDuration] = useState(focusDuration);\n  //durationType is used inside JSX to show either \"Focusing For\" or \"On Break For\"\n  const [durationType, setDurationType] = useState(\"Focusing\");\n  useInterval(\n    () => {\n      if (!remainingTimer) {\n        if (durationType === \"Focusing\") {\n          setRemainingTimer(breakDuration * 60);\n          setDuration(breakDuration);\n          setDurationType(\"On Break\");\n        } else {\n          setRemainingTimer(focusDuration * 60);\n          setDuration(focusDuration);\n          setDurationType(\"Focusing\");\n        }\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      } else {\n        setRemainingTimer((current) => current - 1);\n      }\n\n      // what happens when the timer is running\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  const getProgressPercent = () => {\n    const durationInSecond = duration * 60; //durationType===\"Focusing\"? focusDuration*60 : breakDuration*60;\n    const timeElapsedInSecond = durationInSecond - remainingTimer;\n    const timeElapsedPercent = (\n      (timeElapsedInSecond * 100) /\n      durationInSecond\n    ).toFixed(0);\n    return timeElapsedPercent;\n  };\n\n  const getPausedMessage = () => {\n    const durationInSecond = durationType * 60; //durationType===\"Focusing\"? focusDuration*60 : breakDuration*60;\n    if (!isTimerRunning && remainingTimer !== durationInSecond) {\n      return \"PAUSED\";\n    } else {\n      return \"\";\n    }\n  };\n  if (!isSessionStarted) {\n    /*because state variables are set only once. when focuse and break duration changes\n    the remaining time doesn't change and keeps only the first focus value so we need\n    to change the value of remaininf here before sesion starts for next times the interval \n    does the job*/\n    if (remainingTimer !== focusDuration * 60) {\n      setRemainingTimer(focusDuration*60);\n      setDuration(focusDuration);\n      setDurationType(\"Focusing\");\n    }\n\n    // console.log(\n    //   \"Inside Progress: if (!isSessionStarted) :\",\n    //   remainingTimer,\n    //   durationType,\n    //   durationType\n    // );\n    return (\n      <p>\n        {\" \"}\n        Please set the desired duration and start the session. Once you started\n        the session you can't change the duration or you can terminate the\n        session by clicking on Stop button{\" \"}\n      </p>\n    );\n  }\n\n\n  return (\n    <div>\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n          <h2 data-testid=\"session-title\">\n            {durationType} for {minutesToDuration(duration)} minutes\n          </h2>\n          {/* TODO: Update message below to include time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {secondsToDuration(remainingTimer)} remaining\n          </p>\n          <h2>{getPausedMessage()}</h2>\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: \"20px\" }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={getProgressPercent()} // TODO: Increase aria-valuenow as elapsed time increases\n              //aria-valuenow={(secondsToDuration(timer)).substr(0,2)} // TODO: Increase aria-valuenow as elapsed time increases\n              style={{ width: getProgressPercent() + \"%\" }} // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Progress;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport classNames from \"../utils/class-names\";\nimport Progress from \"./Progress\";\n\n\nfunction PlayStop({\n  focusDuration,\n  breakDuration,\n  isTimerRunning,\n  setIsTimerRunning,\n  isSessionStarted,\n  startSession\n}) {\n  \n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n    if (!isSessionStarted){\n      startSession(true);//it just runs once when the user play then no matter if the uses pauses we are still in that session\n    }\n  }  \n  const refreshPage = () => {\n    // startSession(false);\n    // setIsTimerRunning(false);\n    window.location.reload();\n    };\n\n  // console.log(\"Inside PlayStop: \",focusDuration,breakDuration);\n\n  return (\n    <div>\n      <div className=\"row \">\n        <div className=\"col \">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className={classNames({\n                btn: true,\n                \"btn-secondary\": !isTimerRunning,\n                \"btn-danger\": isTimerRunning,\n              })}\n              title=\"Stop the session\"\n              onClick={refreshPage}\n              disabled={!isSessionStarted}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      <Progress\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        isTimerRunning={isTimerRunning}\n        isSessionStarted={isSessionStarted}\n      />\n      \n    </div>\n  );\n}\n\nexport default PlayStop;\n","import React, { useState } from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport classNames from \"../utils/class-names\";\nimport PlayStop from \"./PlayStop\";\n\nfunction SetDuration() {\n  const [focusDuration,setFocusDuration]=useState(25);\n  const [breakDuration,setBreakDuration]=useState(5);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [isSessionStarted,startSession]=useState(false);\n\n  const handlePlusMinusClick = ({ target: { id } }) => {\n    switch (id) {\n      case \"decrease-break\":\n        setBreakDuration((current)=>Math.max(1,current-1));        \n        break;\n      case \"increase-break\":\n        setBreakDuration((current)=>Math.min(15,current+1))\n        break;\n      case \"decrease-focus\":\n        setFocusDuration((current) => Math.max(5,current-5));\n        break;\n      case \"increase-focus\":\n        setFocusDuration((current) => Math.min(60,current+5));\n        break;\n      default:\n        break;\n    }\n  };\n  // console.log(\"Inside SetDuration: \",focusDuration,breakDuration);\n\n  return (\n    <div className=\"pomodoro\">\n    <div className=\"row border border-primary \">\n      <div className=\"col\">\n        <div className=\"input-group input-group-lg mb-2 \">\n          <span className=\"input-group-text  m-1\" data-testid=\"duration-focus\">\n            {/*display the current focus session duration */}\n            Focus Duration: {minutesToDuration(focusDuration)}\n          </span>\n          <div className=\"input-group-append \">\n            {/* decreasing focus duration and disable during a focus or break session */}\n            <button\n              type=\"button\"\n              className={classNames({\n                btn: true,\n                \"btn-secondary\": true,\n                disabled: isTimerRunning || isSessionStarted,\n              })}\n              data-testid=\"decrease-focus\"\n              onClick={isTimerRunning || isSessionStarted ? undefined : handlePlusMinusClick}\n              id=\"decrease-focus\"\n            >\n              <span className=\"oi oi-minus\" id=\"decrease-focus\" />\n            </button>\n            {/* increasing focus duration  and disable during a focus or break session */}\n            <button\n              type=\"button\"\n              className={classNames({\n                btn: true,\n                \"btn-secondary\": true,\n                disabled: isTimerRunning || isSessionStarted,\n              })}\n              data-testid=\"increase-focus\"\n              onClick={isTimerRunning || isSessionStarted ? undefined : handlePlusMinusClick}\n              id=\"increase-focus\"\n            >\n              <span className=\"oi oi-plus\" id=\"increase-focus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"col\">\n        <div className=\"float-right\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-break\">\n              {/* display the current break session duration */}\n              Break Duration: {minutesToDuration(breakDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* decreasing break duration and disable during a focus or break session*/}\n              <button\n                type=\"button\"\n                className={classNames({\n                  btn: true,\n                  \"btn-secondary\": true,\n                  disabled: isTimerRunning || isSessionStarted,\n                })}\n                data-testid=\"decrease-break\"\n                onClick={isTimerRunning || isSessionStarted ? undefined : handlePlusMinusClick}\n                id=\"decrease-break\"\n              >\n                <span className=\"oi oi-minus\" id=\"decrease-break\" />\n              </button>\n              {/* increasing break duration and disable during a focus or break session*/}\n              <button\n                type=\"button\"\n                className={classNames({\n                  btn: true,\n                  \"btn-secondary\": true,\n                  disabled: isTimerRunning || isSessionStarted,\n                })}\n                data-testid=\"increase-break\"\n                onClick={isTimerRunning || isSessionStarted ? undefined : handlePlusMinusClick}\n                id=\"increase-break\"\n              >\n                <span className=\"oi oi-plus\" id=\"increase-break\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <PlayStop \n                focusDuration={focusDuration}\n                breakDuration={breakDuration}\n                isTimerRunning={isTimerRunning}\n                setIsTimerRunning={setIsTimerRunning}\n                isSessionStarted={isSessionStarted}\n                startSession={startSession}\n      />\n    </div>\n  );\n}\n\nexport default SetDuration;\n","import React from \"react\";\n//import classNames from \"../utils/class-names\";\n//import useInterval from \"../utils/useInterval\";\nimport SetDuration from \"./SetDuration\";\n//import Progress from \"./Progress\";\n\n\nfunction Pomodoro() {\n  document.title=\"Behrooz Timer\";\n  \n  return (\n      <SetDuration />\n  );\n}\n\nexport default Pomodoro;\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}